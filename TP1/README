DESHAIES Christopher

	ACT TP1
	
1 - Les classiques

1.1.2 -	En précisant le morceaux de la courbes que l'on veut observer on s'apperçoie que la fonction g(n) n'est pas une droite
	collé à l'abscisse mais une courbe croissante.
	
1.2.4 -	On peut en déduire que 
		logn < n < n*logn < n < k^n < expn < n! < n^n
		
1.3.1 -	Le rapport log(n) / n^epsi tend vers 0 soit n^epsi > log(n)
	
1.3.2 -	Le rapport n^k / 2^n tend vers 0 en +infini pour n > 5*k
	

2 - Mesures sur structures de données

2.0 - On peut etudier sa complexité en fonction du temps d'execution de la fonction.

2.1.1 - La classe algorithmique de la fonction est en nlog(n) car une fois qu'il aura trouver la solution il sortira de la boucle ou au pire en n.

2.1.3 - La courbe est différente mais toujours croissante à cause de la fonction alea qui peut modifier la durée de la recherche

2.1.4 - Il faut executer les fonctions de recherche après la boucle aléa dans une autre boucle.

2.1.6 - La complexité correspond bien à n*log(n)

2.2.3 - La fonction du minimumTri prend un temps de traitement bcp plus élevé que le minimiSimple, on peut en déduire que la fonction sort() est a eviter.

2.3 - Les structures de type Liste mettent nettement plus de temps à l'execution que la structure Tableau soit les Tableau plus efficace que les Listes
	(La compilation bloque pour l'utilisation de la fonction mystere sur les Listes dû au temps d'execution ...)
