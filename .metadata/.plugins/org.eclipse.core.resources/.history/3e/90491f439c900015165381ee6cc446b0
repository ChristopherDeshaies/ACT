package travellingSalemansProblem;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

import until.Methode;
import classesPb.*;

public class CertificatTSP implements Certificat{

	private TSP tsp;
	public List<String> tableauSolution;
	public int nbCertificatMax;
	public String certificat;
	public String certificatSaisie;
	private Scanner scanner;
	public int numCertificat = 0;
	
	/**
	 * Constructeur
	 * @param tsp
	 */
	public CertificatTSP(TSP tsp){
		this.tsp=tsp;
		this.tableauSolution = new ArrayList<String>();
		this.nbCertificatMax = Methode.factorial( tsp.longueurTournee - 1 ) * tsp.longueurTournee;
	}

	
	public TSP getTsp() {
		return tsp;
	}

	public void setTsp(TSP tsp) {
		this.tsp = tsp;
	}

	public Boolean valideCertificat(){
		if(tableauSolution.isEmpty())
			reset();
		
		if(certificat == certificatSaisie)
			return true;
		
		return false;
	}
	
	public void genererAllCertificat(int valeurTournee, List<Integer> listVilleVisite){

		if(listVilleVisite.size() == getTsp().nbVilles){
			System.out.println("valeurtournee : "+valeurTournee+" + dernierValeur : "+this.getTsp().distances[listVilleVisite.get(listVilleVisite.size()-1)][listVilleVisite.get(0)]);	
			//Condition de sortie : Parcour invalide
			if( ( valeurTournee + this.getTsp().distances[listVilleVisite.get(listVilleVisite.size()-1)][listVilleVisite.get(0)] ) > this.getTsp().longueurTournee){
				
			}else {
				System.out.println("Solution trouvé ! ");
				String parcours = "";
				
				/** sauvegarde du certificat en base **/
				for(int m=0;m<listVilleVisite.size();m++)
					parcours += tsp.ville[listVilleVisite.get(m)];
				
				parcours += tsp.ville[listVilleVisite.get(0)];
				
				tableauSolution.add(parcours);
				
			}
		}
		
		System.out.println("Parcours ... ");
		for(int i=0;i<this.getTsp().nbVilles;i++){
			
			List<Integer> listTmp = listVilleVisite;
			
			if(!listTmp.contains(i)){
				System.out.println("Parcours ... i= "+i);
				listTmp.add(i);
				

				/** Condition de sortie : Ssi longueur entre 2 ville > a la tournee **/
				if( ( this.getTsp().distances[listTmp.get(listTmp.size()-1)][j] + valeurTournee ) > this.getTsp().longueurTournee){
					System.out.println("Erreur de parcours ");
				}else{ 
							
					int valeurTourneeTmp = valeurTournee + this.getTsp().distances[listTmp.get(listTmp.size()-1)][i] ;
					listTmp.add(j);
					System.out.println("valeurTourneeTmp : "+valeurTourneeTmp+ " dernier ajout : "+listTmp.get(listTmp.size()-1));	
					/** On continue de rechercher la suite de la tournee **/
					genererAllCertificat( valeurTourneeTmp  ,listTmp);
							
				}
			}
		}
	}
	
	
	
	public void usage(){
		System.out.println("( Format certificat type : 132451 / Attention a mettre aucun espaces ).");
	}
	
	
	
	@Override
	public void saisie() {	/** Methode "verification" propose à l'utilisateur de saisir un certificat et vérifie sa validité **/
		usage();
		scanner = new Scanner(System.in);
		certificatSaisie = scanner.nextLine();		
	}

	
	
	@Override
	public void display() {
		for(int i=0;i<tableauSolution.size();i++)
			System.out.println(tableauSolution.get(i));
	}

	
	
	@Override
	public void alea() {
		if(tableauSolution.isEmpty())
			reset();
			
		/** Ssi tous les certificats sont en memoire **/
		if(tableauSolution.size() == nbCertificatMax){
			Random random = new Random();
			int pointeurCertficat = random.nextInt(tableauSolution.size());
			certificat = tableauSolution.get(pointeurCertficat);
		}else{
				
		}
		
	}

	@Override
	public void reset() {
		/** Reinitialisation des donnees **/
		tableauSolution.clear();
		numCertificat = 0;
		
		/** Generations des certificats **/
		genererAllCertificat(0, new ArrayList<Integer>());
		
		/** Recup du premier certificat dans la liste **/
		certificat = tableauSolution.get(numCertificat);
		
	}

	@Override
	public boolean estDernier() {
		/** Le dernier de la liste des certificats **/
		if(numCertificat == tableauSolution.size())
			return true;
		
		return false;
	}

	
	@Override
	public void suivant() {
		
		/** Aucun certificat en memoire **/
		if(tableauSolution.isEmpty())
			reset();
		
		/** Ssi on a parcouru tous les certificats **/
		if(estDernier())
			numCertificat = 0;
		
		/** Recuperation du premier certificat **/
		certificat = tableauSolution.get(numCertificat);	
		
	}

}
