package travellingSalemansProblem;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.io.*;

import until.Methode;
import classesPb.*;

public class CertificatTSP implements Certificat{

	private TSP tsp;
	public List<String> tableauSolution;
	public int nbCertificatMax;
	
	/**
	 * Constructeur
	 * @param tsp
	 */
	public CertificatTSP(TSP tsp){
		this.tsp=tsp;
		this.tableauSolution = new ArrayList<String>();
		this.nbCertificatMax = Methode.factorial( tsp.longueurTournee - 1 ) * tsp.longueurTournee;
	}

	
	public TSP getTsp() {
		return tsp;
	}

	public void setTsp(TSP tsp) {
		this.tsp = tsp;
	}


	public void genererAllCertificat(){
		List<Integer> listProchaineVille = new ArrayList<Integer>();
		for(int i=0;i<this.getTsp().nbVilles;i++)
			listProchaineVille.add(i);
		
		for(int i=0;i<listProchaineVille.size();i++){
			
		}
		
	}
	
	public int genererCertificat(List<Integer> listVilleVisite){
		
		for(int i=0;i<this.getTsp().nbVilles;i++){
			
			List<Integer> listTmp = listVilleVisite;
			
			if(!listTmp.contains(i)){
				
				listTmp.add(i);
				
				/** Condition de sortie : Ssi longueur entre 2 ville > a la tournee **/
				if( this.getTsp().distances[listVilleVisite.get(listVilleVisite.size()-1)][i] > this.getTsp().longueurTournee)
					return -1;
				else /** On retourne la distance entre les 2 villes **/
					return genererCertificat(listVilleVisite) + this.getTsp().distances[listVilleVisite.get(listVilleVisite.size()-1)][i];
				
				genererCertificat()
			}
		}
		return 0;
	}
	
	@Override
	public void saisie() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void display() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void alea() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void reset() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean estDernier() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void suivant() {
		// TODO Auto-generated method stub
		
	}

}
