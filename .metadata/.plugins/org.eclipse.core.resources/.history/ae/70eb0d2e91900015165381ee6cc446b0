package travellingSalemansProblem;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

import until.Methode;
import classesPb.*;

public class CertificatTSP implements Certificat{

	private TSP tsp;
	public List<String> tableauSolution;
	public int nbCertificatMax;
	public String certificat;
	private Scanner scanner;
	public int numCertificat = 0;
	
	/**
	 * Constructeur
	 * @param tsp
	 */
	public CertificatTSP(TSP tsp){
		this.tsp=tsp;
		this.tableauSolution = new ArrayList<String>();
		this.nbCertificatMax = Methode.factorial( tsp.longueurTournee - 1 ) * tsp.longueurTournee;
	}

	
	public TSP getTsp() {
		return tsp;
	}

	public void setTsp(TSP tsp) {
		this.tsp = tsp;
	}

	
	public int genererAllCertificat(int valeurTournee, List<Integer> listVilleVisite){
		
		if(listVilleVisite.size() == getTsp().nbVilles){
				
			//Condition de sortie : Parcour invalide
			if( ( valeurTournee + this.getTsp().distances[listVilleVisite.get(listVilleVisite.size()-1)][listVilleVisite.get(0)] ) > this.getTsp().longueurTournee)
				return -1;
			else {
				
				String parcours = "";
				
				/** sauvegarde du certificat en base **/
				for(int m=0;m<listVilleVisite.size();m++)
					parcours += tsp.ville[listVilleVisite.get(m)];
				
				parcours += tsp.ville[listVilleVisite.get(0)];
				
				tableauSolution.add(parcours);
				
				/** retour la valeur du certificat **/
				return ( valeurTournee + this.getTsp().distances[listVilleVisite.get(listVilleVisite.size()-1)][listVilleVisite.get(0)] );
			}
		}
		
		
		for(int i=0;i<this.getTsp().nbVilles;i++){
			
			List<Integer> listTmp = listVilleVisite;
			
			if(!listTmp.contains(i)){
				
				listTmp.add(i);
				
				/** Condition de sortie : Ssi longueur entre 2 ville > a la tournee **/
				if( ( this.getTsp().distances[listTmp.get(listTmp.size()-1)][i] + valeurTournee ) > this.getTsp().longueurTournee)
					return -1;
				else{ 
					/** On continue de rechercher la suite de la tournee **/
					return genererAllCertificat( ( valeurTournee + this.getTsp().distances[listTmp.get(listTmp.size()-1)][i] ),listTmp);
				}
			}
		}
		return 0;
	}
	
	
	
	public void usage(){
		System.out.println("( Format certificat type : 1 3 2 4 5 1 / Attention à mettre des espaces uniquement entre les villes ).");
	}
	
	
	
	@Override
	public void saisie() {	/** Methode "verification" propose à l'utilisateur de saisir un certificat et vérifie sa validité **/
		usage();
		scanner = new Scanner(System.in);
		certificat = scanner.nextLine();		
	}

	
	
	@Override
	public void display() {
		System.out.println(certificat);
	}

	
	
	@Override
	public void alea() {
		if(tableauSolution.size() == 0)
			reset();
			
		/** Ssi tous les certificats sont en memoire **/
		if(tableauSolution.size() == nbCertificatMax){
			Random random = new Random();
			int pointeurCertficat = random.nextInt(tableauSolution.size());
			certificat = tableauSolution.get(pointeurCertficat);
		}else{
				
		}
		
	}

	@Override
	public void reset() {
		/** Reinitialisation des donnees **/
		tableauSolution.clear();
		numCertificat = 0;
		
		/** Generations des certificats **/
		int cert = genererAllCertificat(0, new ArrayList<Integer>());
		
		/** Recup du premier certificat dans la liste **/
		certificat = tableauSolution.get(numCertificat);
		
	}

	@Override
	public boolean estDernier() {
		
		if(numCertificat == tableauSolution.size())
			return true;
		
		return false;
	}

	
	@Override
	public void suivant() {
		
		/** Aucun certificat en memoire **/
		if(tableauSolution.size() == 0)
			reset();
		
		/** Ssi on a parcouru tous les certificats **/
		if(numCertificat == tableauSolution.size())
			numCertificat = 0;
			
		certificat = tableauSolution.get(numCertificat);	
		
	}

}
